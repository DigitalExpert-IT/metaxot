/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type ListCategoryStruct = {
  name: string;
  totalPremintNFt: BigNumberish;
  totalNft: BigNumberish;
};

export type ListCategoryStructOutput = [
  name: string,
  totalPremintNFt: bigint,
  totalNft: bigint
] & { name: string; totalPremintNFt: bigint; totalNft: bigint };

export type ListMaterialNftStruct = {
  uuid: string;
  price: BigNumberish;
  maxMint: BigNumberish;
};

export type ListMaterialNftStructOutput = [
  uuid: string,
  price: bigint,
  maxMint: bigint
] & { uuid: string; price: bigint; maxMint: bigint };

export type ListNftStruct = {
  nftId: BigNumberish;
  owner: AddressLike;
  price: BigNumberish;
  uuid: string;
  category: BigNumberish;
};

export type ListNftStructOutput = [
  nftId: bigint,
  owner: string,
  price: bigint,
  uuid: string,
  category: bigint
] & {
  nftId: bigint;
  owner: string;
  price: bigint;
  uuid: string;
  category: bigint;
};

export type ListPreMintNftStruct = {
  uuid: string;
  price: BigNumberish;
  isRentalAble: boolean;
  rentId: BigNumberish;
  isSold: boolean;
  category: BigNumberish;
};

export type ListPreMintNftStructOutput = [
  uuid: string,
  price: bigint,
  isRentalAble: boolean,
  rentId: bigint,
  isSold: boolean,
  category: bigint
] & {
  uuid: string;
  price: bigint;
  isRentalAble: boolean;
  rentId: bigint;
  isSold: boolean;
  category: bigint;
};

export interface MarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_totalNftMaterialsCounter"
      | "_totalNftPreMintNftSales"
      | "_totalNftSalesCounter"
      | "addCategory"
      | "buyMaterialNft"
      | "buyNft"
      | "buyPreMintNft"
      | "cancelSellNft"
      | "createNft"
      | "getCategory"
      | "getCategoryById"
      | "getListedMaterialSales"
      | "getListedNftSales"
      | "getListedNftSalesByCategory"
      | "getListedPreMintNftSales"
      | "getListedPreMintNftSalesByCategory"
      | "getNftSales"
      | "getPreMintNftSales"
      | "initialize"
      | "listMaterialNftSales"
      | "listNftSales"
      | "listPreMintNftSales"
      | "listingMaterialNft"
      | "listingNft"
      | "materialNft"
      | "mnft"
      | "onERC721Received"
      | "owner"
      | "renounceOwnership"
      | "sellNft"
      | "totalCategory"
      | "totalMaterialNftSales"
      | "totalNftSales"
      | "totalPreMintNftales"
      | "transferOwnership"
      | "unlistPreMintNft"
      | "updateMaterialNftSales"
      | "updateNftSales"
      | "updatePreMintNftSales"
      | "xpc"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_totalNftMaterialsCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalNftPreMintNftSales",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalNftSalesCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addCategory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyMaterialNft",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyPreMintNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSellNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNft",
    values: [string, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListedMaterialSales",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListedNftSales",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListedNftSalesByCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListedPreMintNftSales",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListedPreMintNftSalesByCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftSales",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPreMintNftSales",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listMaterialNftSales",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listNftSales",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listPreMintNftSales",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listingMaterialNft",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listingNft",
    values: [string, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "materialNft",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mnft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellNft",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCategory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalMaterialNftSales",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalNftSales",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPreMintNftales",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlistPreMintNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaterialNftSales",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNftSales",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePreMintNftSales",
    values: [BigNumberish, string, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "xpc", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "_totalNftMaterialsCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalNftPreMintNftSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalNftSalesCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyMaterialNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyPreMintNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSellNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListedMaterialSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListedNftSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListedNftSalesByCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListedPreMintNftSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListedPreMintNftSalesByCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreMintNftSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listMaterialNftSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listNftSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listPreMintNftSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingMaterialNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listingNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "materialNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mnft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMaterialNftSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalNftSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPreMintNftales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlistPreMintNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaterialNftSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNftSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePreMintNftSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xpc", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Market extends BaseContract {
  connect(runner?: ContractRunner | null): Market;
  waitForDeployment(): Promise<this>;

  interface: MarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _totalNftMaterialsCounter: TypedContractMethod<[], [bigint], "view">;

  _totalNftPreMintNftSales: TypedContractMethod<[], [bigint], "view">;

  _totalNftSalesCounter: TypedContractMethod<[], [bigint], "view">;

  addCategory: TypedContractMethod<[name: string], [void], "nonpayable">;

  buyMaterialNft: TypedContractMethod<
    [listId: BigNumberish, amount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  buyNft: TypedContractMethod<[nftId: BigNumberish], [void], "nonpayable">;

  buyPreMintNft: TypedContractMethod<
    [listId: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelSellNft: TypedContractMethod<
    [nftId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createNft: TypedContractMethod<
    [
      uuid: string,
      price: BigNumberish,
      isRentalAble: boolean,
      category: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getCategory: TypedContractMethod<[], [ListCategoryStructOutput[]], "view">;

  getCategoryById: TypedContractMethod<
    [categoryId: BigNumberish],
    [ListCategoryStructOutput],
    "view"
  >;

  getListedMaterialSales: TypedContractMethod<
    [],
    [ListMaterialNftStructOutput[]],
    "view"
  >;

  getListedNftSales: TypedContractMethod<[], [ListNftStructOutput[]], "view">;

  getListedNftSalesByCategory: TypedContractMethod<
    [category: BigNumberish],
    [ListNftStructOutput[]],
    "view"
  >;

  getListedPreMintNftSales: TypedContractMethod<
    [],
    [ListPreMintNftStructOutput[]],
    "view"
  >;

  getListedPreMintNftSalesByCategory: TypedContractMethod<
    [category: BigNumberish],
    [ListPreMintNftStructOutput[]],
    "view"
  >;

  getNftSales: TypedContractMethod<
    [nftId: BigNumberish],
    [ListNftStructOutput],
    "view"
  >;

  getPreMintNftSales: TypedContractMethod<
    [listId: BigNumberish],
    [ListPreMintNftStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _adminAddress: AddressLike,
      _xpc: AddressLike,
      _mnft: AddressLike,
      _materialNft: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  listMaterialNftSales: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        uuid: string;
        price: bigint;
        maxMint: bigint;
      }
    ],
    "view"
  >;

  listNftSales: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint] & {
        nftId: bigint;
        owner: string;
        price: bigint;
        uuid: string;
        category: bigint;
      }
    ],
    "view"
  >;

  listPreMintNftSales: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, bigint, boolean, bigint] & {
        uuid: string;
        price: bigint;
        isRentalAble: boolean;
        rentId: bigint;
        isSold: boolean;
        category: bigint;
      }
    ],
    "view"
  >;

  listingMaterialNft: TypedContractMethod<
    [uuid: string, price: BigNumberish, maxMint: BigNumberish],
    [void],
    "nonpayable"
  >;

  listingNft: TypedContractMethod<
    [
      uuid: string,
      price: BigNumberish,
      isRentalAble: boolean,
      category: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  materialNft: TypedContractMethod<[], [string], "view">;

  mnft: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sellNft: TypedContractMethod<
    [nftId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalCategory: TypedContractMethod<[], [bigint], "view">;

  totalMaterialNftSales: TypedContractMethod<[], [bigint], "view">;

  totalNftSales: TypedContractMethod<[], [bigint], "view">;

  totalPreMintNftales: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlistPreMintNft: TypedContractMethod<
    [_listId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaterialNftSales: TypedContractMethod<
    [
      _nftId: BigNumberish,
      _uuid: string,
      _price: BigNumberish,
      _maxMint: BigNumberish,
      _category: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateNftSales: TypedContractMethod<
    [
      _nftId: BigNumberish,
      _uuid: string,
      _price: BigNumberish,
      _category: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updatePreMintNftSales: TypedContractMethod<
    [
      _listId: BigNumberish,
      _uuid: string,
      _price: BigNumberish,
      _isRentalAble: boolean,
      _category: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  xpc: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_totalNftMaterialsCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_totalNftPreMintNftSales"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_totalNftSalesCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addCategory"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyMaterialNft"
  ): TypedContractMethod<
    [listId: BigNumberish, amount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyNft"
  ): TypedContractMethod<[nftId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyPreMintNft"
  ): TypedContractMethod<[listId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelSellNft"
  ): TypedContractMethod<[nftId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createNft"
  ): TypedContractMethod<
    [
      uuid: string,
      price: BigNumberish,
      isRentalAble: boolean,
      category: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCategory"
  ): TypedContractMethod<[], [ListCategoryStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getCategoryById"
  ): TypedContractMethod<
    [categoryId: BigNumberish],
    [ListCategoryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getListedMaterialSales"
  ): TypedContractMethod<[], [ListMaterialNftStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getListedNftSales"
  ): TypedContractMethod<[], [ListNftStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getListedNftSalesByCategory"
  ): TypedContractMethod<
    [category: BigNumberish],
    [ListNftStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getListedPreMintNftSales"
  ): TypedContractMethod<[], [ListPreMintNftStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getListedPreMintNftSalesByCategory"
  ): TypedContractMethod<
    [category: BigNumberish],
    [ListPreMintNftStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNftSales"
  ): TypedContractMethod<[nftId: BigNumberish], [ListNftStructOutput], "view">;
  getFunction(
    nameOrSignature: "getPreMintNftSales"
  ): TypedContractMethod<
    [listId: BigNumberish],
    [ListPreMintNftStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _adminAddress: AddressLike,
      _xpc: AddressLike,
      _mnft: AddressLike,
      _materialNft: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listMaterialNftSales"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        uuid: string;
        price: bigint;
        maxMint: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "listNftSales"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint] & {
        nftId: bigint;
        owner: string;
        price: bigint;
        uuid: string;
        category: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "listPreMintNftSales"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, bigint, boolean, bigint] & {
        uuid: string;
        price: bigint;
        isRentalAble: boolean;
        rentId: bigint;
        isSold: boolean;
        category: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "listingMaterialNft"
  ): TypedContractMethod<
    [uuid: string, price: BigNumberish, maxMint: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listingNft"
  ): TypedContractMethod<
    [
      uuid: string,
      price: BigNumberish,
      isRentalAble: boolean,
      category: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "materialNft"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mnft"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellNft"
  ): TypedContractMethod<
    [nftId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalCategory"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalMaterialNftSales"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalNftSales"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPreMintNftales"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlistPreMintNft"
  ): TypedContractMethod<[_listId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaterialNftSales"
  ): TypedContractMethod<
    [
      _nftId: BigNumberish,
      _uuid: string,
      _price: BigNumberish,
      _maxMint: BigNumberish,
      _category: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateNftSales"
  ): TypedContractMethod<
    [
      _nftId: BigNumberish,
      _uuid: string,
      _price: BigNumberish,
      _category: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePreMintNftSales"
  ): TypedContractMethod<
    [
      _listId: BigNumberish,
      _uuid: string,
      _price: BigNumberish,
      _isRentalAble: boolean,
      _category: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xpc"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
